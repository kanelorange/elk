version: '3.3'
#:::::::::::::
services:
#=======================================
  # Elasticsearch container
  elasticsearch:
    container_name: cont_elastic
    #-----------------------------------
    # Pull image via docker-compose file
    #image: elasticsearch:${ELK_VERSION}
    #-----------------------------------
    # Build up image via Dockerfile and tag it
    build:
      context: ./elasticsearch_data
      dockerfile: Dockerfile
      tags:
        - "kanelorange/elasticsearch:${ELK_VERSION}"
      args:
        ELK_VERSION: ${ELK_VERSION}
    #-----------------------------------
    hostname: ${HOSTNAME_ELASTIC}
    networks:
      - localnet
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      # Mount elasticsearch configuration file to container
      - type: bind
        source: ./elasticsearch_data/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      # Mount Elastic Stack Instance Data directory to container
      - type: bind
        source: ./elasticsearch_data/es_data
        target: /usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: ${ES_JAVA_OPTS}
      HOSTNAME_ELASTIC: ${HOSTNAME_ELASTIC}
      HOSTNAME_LOGSTASH: ${HOSTNAME_LOGSTASH}
      HOSTNAME_KIBANA: ${HOSTNAME_KIBANA}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    ulimits:
      # Set memlock to limit elasticsearch memory
      memlock:
        soft: -1
        hard: -1
      #nofile:
      #  soft: 65536
      #  hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "curl --fail ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}@${HOSTNAME_ELASTIC}:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 30
#=======================================
  # Logstash container
  logstash:
    # Wait until elasticsearch has started
    depends_on:
      elasticsearch:
        condition: service_healthy
    container_name: cont_logstash
    #-----------------------------------
    # Pull image via docker-compose file
    #image: logstash:${ELK_VERSION}
    #-----------------------------------
    # Build up image via Dockerfile and tag it
    build:
      context: ./logstash_data
      dockerfile: Dockerfile
      tags:
        - "kanelorange/logstash:${ELK_VERSION}"
      args:
        ELK_VERSION: ${ELK_VERSION}
    #-----------------------------------
    hostname: ${HOSTNAME_LOGSTASH}
    networks:
      - localnet
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      # Mount logstash configuration file to container
      - type: bind
        source: ./logstash_data/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      # Mount logstash outputs configuration file to container
      - type: bind
        source: ./logstash_data/beats.conf
        target: /usr/share/logstash/beats.conf
        read_only: true
    environment:
      LS_JAVA_OPTS: ${LS_JAVA_OPTS}
      HOSTNAME_ELASTIC: ${HOSTNAME_ELASTIC}
      HOSTNAME_LOGSTASH: ${HOSTNAME_LOGSTASH}
      HOSTNAME_KIBANA: ${HOSTNAME_KIBANA}
      HOSTNAME_METRICBEAT: ${HOSTNAME_METRICBEAT}
      HOSTNAME_FILEBEAT: ${HOSTNAME_FILEBEAT}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
#=======================================
  # Kibana container
  kibana:
    # Wait until elasticsearch and logstash have started  
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_started
    container_name: cont_kibana
    #-----------------------------------
    # Pull image via docker-compose file
    #image: kibana:${ELK_VERSION}
    #-----------------------------------
    # Build up image via Dockerfile and tag it
    build:
      context: ./kibana_data
      dockerfile: Dockerfile
      tags:
        - "kanelorange/kibana:${ELK_VERSION}"
      args:
        ELK_VERSION: ${ELK_VERSION}
    #-----------------------------------
    hostname: ${HOSTNAME_KIBANA}
    networks:
      - localnet
    ports:
      - "5601:5601"
    volumes:
      # Mount kibana configuration file to container
      - type: bind
        source: ./kibana_data/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    environment:
      HOSTNAME_ELASTIC: ${HOSTNAME_ELASTIC}
      HOSTNAME_LOGSTASH: ${HOSTNAME_LOGSTASH}
      HOSTNAME_KIBANA: ${HOSTNAME_KIBANA}
      HOSTNAME_METRICBEAT: ${HOSTNAME_METRICBEAT}
      HOSTNAME_FILEBEAT: ${HOSTNAME_FILEBEAT}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "curl -s ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}@${HOSTNAME_KIBANA}:5601/api/status?v8format=true | grep -q '\"overall\":{\"level\":\"available\"'"]
      #test: ["CMD-SHELL", "curl --fail ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}@${HOSTNAME_KIBANA}:5601/api/status | grep -q 'available'"]
      interval: 10s
      timeout: 30s
      retries: 30
#=======================================
  # Metricbeat container for Elastic Stack monitoring  
  metricbeat-cluster:
    # Wait until < E-L-K > has started
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_started
      kibana:
        condition: service_healthy
    container_name: cont_metricbeat_cluster
    #-----------------------------------
    # Pull image via docker-compose file
    #image: elastic/metricbeat:${ELK_VERSION}
    #-----------------------------------
    # Build up image via Dockerfile and tag it
    build:
      context: ./metricbeat_cluster
      dockerfile: Dockerfile
      tags:
        - "kanelorange/metricbeat-cluster:${ELK_VERSION}"
      args:
        ELK_VERSION: ${ELK_VERSION}
    #-----------------------------------
    hostname: ${HOSTNAME_METRICBEAT}
    networks:
      - localnet
    expose:
      - "5066"
    volumes:
      # Mount metricbeat configuration file to container
      - type: bind
        source: ./metricbeat_cluster/metricbeat.yml
        #target: /usr/share/metricbeat/config/metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
        read_only: true
      # Mount docker-host-running directory to container
      - /:/hostfs:ro
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /run/systemd/private:/run/systemd/private:ro
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    environment:
      HOSTNAME_ELASTIC: ${HOSTNAME_ELASTIC}
      HOSTNAME_LOGSTASH: ${HOSTNAME_LOGSTASH}
      HOSTNAME_KIBANA: ${HOSTNAME_KIBANA}
      HOSTNAME_METRICBEAT: ${HOSTNAME_METRICBEAT}
      HOSTNAME_FILEBEAT: ${HOSTNAME_FILEBEAT}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
#=======================================
  # Filebeat container for Elastic Stack logs  
  filebeat-cluster:
    # Wait until < E-L-K > has started
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_started
      kibana:
        condition: service_healthy
    container_name: cont_filebeat_cluster
    #-----------------------------------
    # Pull image via docker-compose file
    #image: elastic/filebeat:${ELK_VERSION}
    #-----------------------------------
    # Build up image via Dockerfile and tag it
    build:
      context: ./filebeat_cluster
      dockerfile: Dockerfile
      tags:
        - "kanelorange/filebeat-cluster:${ELK_VERSION}"
      args:
        ELK_VERSION: ${ELK_VERSION}
    #-----------------------------------
    hostname: ${HOSTNAME_FILEBEAT}
    networks:
      - localnet
    expose:
      - "5066"
    volumes:
      # Mount filebeat configuration file to container
      - type: bind
        source: ./filebeat_cluster/filebeat.yml
        #target: /usr/share/metricbeat/config/filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
        read_only: true
      # Mount docker-host-running directory to container
      #- /:/hostfs:ro
      #- /proc:/hostfs/proc:ro
      #- /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      #- /run/systemd/private:/run/systemd/private:ro
      - /var/run/docker.sock:/var/run/docker.sock
      # This is needed for filebeat to load container log path as specified in filebeat.yml
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      # This is needed for filebeat to load logs for system and auth modules
      - /var/log/:/var/log/:ro
    user: root
    environment:
      HOSTNAME_ELASTIC: ${HOSTNAME_ELASTIC}
      HOSTNAME_LOGSTASH: ${HOSTNAME_LOGSTASH}
      HOSTNAME_KIBANA: ${HOSTNAME_KIBANA}
      HOSTNAME_FILEBEAT: ${HOSTNAME_FILEBEAT}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
#=======================================
networks:
  localnet: